name: Build and Package

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

permissions: read-all

jobs:
  generate_version:
    name: Generate Version Info
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      sanitized_version: ${{ steps.version.outputs.SANITIZED_VERSION }}
      short_hash: ${{ steps.version.outputs.SHORT_HASH }}
      long_hash: ${{ steps.version.outputs.LONG_HASH }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Make script executable
        run: chmod +x ./scripts/commit_version.sh
      - name: Generate Version from Git
        id: version
        run: ./scripts/commit_version.sh

  build_binaries:
    name: Build on ${{ matrix.os }}
    needs: [generate_version]
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_suffix: linux
            shell: bash
          - os: windows-latest
            artifact_suffix: windows
            shell: pwsh
          - os: macos-latest
            artifact_suffix: macos
            shell: bash

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12.0
      - name: Install uv
        uses: astral-sh/setup-uv@v1

      - name: Set Version Environment Variables
        shell: bash
        run: |
          echo "SETUPTOOLS_SCM_PRETEND_VERSION=${{ needs.generate_version.outputs.version }}" >> $GITHUB_ENV
          echo "HATCH_VCS_PRETEND_VERSION=${{ needs.generate_version.outputs.version }}" >> $GITHUB_ENV

      - name: Install Dependencies and Build Tools
        shell: bash
        run: |
          uv venv
          if [ "${{ runner.os }}" == "Windows" ]; then
            . .venv/Scripts/activate
          else
            source .venv/bin/activate
          fi
          # Install core, ffmpeg, and dev dependencies all at once from pyproject.toml
          uv sync --verbose --extra ffmpeg --extra dev

      - name: Set UTF-8 environment (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "PYTHONUTF8=1" >> $env:GITHUB_ENV
          echo "PYTHONLEGACYWINDOWSSTDIO=utf8" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Build Executable using Spec Files (One-File)
        id: build_onefile # Add an ID to this step
        shell: bash
        run: |
          SANITIZED_VERSION="${{ needs.generate_version.outputs.sanitized_version }}"
          EXE_NAME="ofscraper_${{ matrix.artifact_suffix }}_${SANITIZED_VERSION}"
          
          # Activate venv
          if [ "${{ runner.os }}" == "Windows" ]; then
              source .venv/Scripts/activate
              EXE_EXT=".exe"
          else
              source .venv/bin/activate
              EXE_EXT=""
          fi
          
          echo "Building one-file executable from specs/onefile.spec..."
          pyinstaller specs/onefile.spec
          mv dist/ofscraper_file${EXE_EXT} dist/${EXE_NAME}${EXE_EXT}
          echo "one_file_path=dist/${EXE_NAME}${EXE_EXT}" >> $GITHUB_OUTPUT # Output the path
          echo "one_file_name=${EXE_NAME}${EXE_EXT}" >> $GITHUB_OUTPUT # Output the name


      - name: Upload One-File Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build_onefile.outputs.one_file_name }} # Use the output from the previous step
          path: ${{ steps.build_onefile.outputs.one_file_path }}
          if-no-files-found: ignore

      - name: Build and Zip One-Dir Bundle
        id: build_onedir_zip # Add an ID to this step
        shell: bash
        # Add `continue-on-error: true` here to ensure subsequent steps run even if this fails
        continue-on-error: true
        run: |
          SANITIZED_VERSION="${{ needs.generate_version.outputs.sanitized_version }}"
          DIR_NAME="ofscraper_${{ matrix.artifact_suffix }}_dir"
          ZIP_NAME="ofscraper_${{ matrix.artifact_suffix }}_${SANITIZED_VERSION}.zip"

          # Activate venv (ensure venv is activated for PyInstaller)
          if [ "${{ runner.os }}" == "Windows" ]; then
              source .venv/Scripts/activate
          else
              source .venv/bin/activate
          fi

          echo "Building one-dir bundle from specs/onedir.spec..."
          pyinstaller specs/onedir.spec
          mv dist/ofscraper_dir dist/${DIR_NAME}

          echo "Zipping one-dir build..."
          if [ "${{ runner.os }}" == "Windows" ]; then
            powershell -Command "Compress-Archive -Path dist/${DIR_NAME} -DestinationPath dist/${ZIP_NAME} -Force"
          else
            zip -r "dist/${ZIP_NAME}" "dist/${DIR_NAME}"
          fi
          echo "zip_path=dist/${ZIP_NAME}" >> $GITHUB_OUTPUT # Output the path of the zip
          echo "zip_name=${ZIP_NAME}" >> $GITHUB_OUTPUT # Output the name of the zip
          echo "dir_path=dist/${DIR_NAME}" >> $GITHUB_OUTPUT # Output the path of the directory
          echo "dir_name=dist/${DIR_NAME}" >> $GITHUB_OUTPUT # Output the name of the directory


      - name: Upload Zipped One-Dir Artifact
        if: success() && steps.build_onedir_zip.outcome == 'success' # Only upload if zipping was successful
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build_onedir_zip.outputs.zip_name }}
          path: ${{ steps.build_onedir_zip.outputs.zip_path }}
          if-no-files-found: ignore

      - name: Upload One-Dir Folder (if zip failed)
        if: failure() && steps.build_onedir_zip.outcome == 'failure' # Only upload the folder if zipping failed
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build_onedir_zip.outputs.dir_name }}
          path: ${{ steps.build_onedir_zip.outputs.dir_path }}
          if-no-files-found: ignore

  publish_release:
    name: Publish GitHub Release
    if: github.event_name == 'push' && !contains(github.ref, 'refs/tags/')
    needs: [build_binaries, generate_version]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: List downloaded files for debugging
        run: ls -R artifacts

      - name: Create or Update Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: artifacts/*/*
          tag: "dev-${{ needs.generate_version.outputs.short_hash }}"
          name: "Dev Build ${{ needs.generate_version.outputs.short_hash }}"
          body: "This is an auto-generated development release created from commit hash `${{ needs.generate_version.outputs.long_hash }}`. Version: `${{ needs.generate_version.outputs.version }}`"
          commit: "${{ needs.generate_version.outputs.long_hash }}"
          allowUpdates: true
          prerelease: true