name: Build and Package

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

permissions: read-all

jobs:
  generate_version:
    # This new job runs once, calculates all version info, and provides it to other jobs.
    name: Generate Version Info
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      sanitized_version: ${{ steps.version.outputs.SANITIZED_VERSION }}
      short_hash: ${{ steps.version.outputs.SHORT_HASH }}
      long_hash: ${{ steps.version.outputs.LONG_HASH }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for git describe to work correctly
          fetch-tags: true
      - name: Make script executable  # <--- ADD THIS STEP
        run: chmod +x ./scripts/commit_version.sh
      - name: Generate Version from Git
        id: version
        run: ./scripts/commit_version.sh

  build_binaries:
    name: Build on ${{ matrix.os }}
    needs: [generate_version] # Depends on the new version job
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_suffix: linux
            shell: bash
          - os: windows-latest
            artifact_suffix: windows
            shell: pwsh
          - os: macos-latest
            artifact_suffix: macos
            shell: bash

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.0'
      - name: Install uv
        uses: astral-sh/setup-uv@v1

      - name: Set Version Environment Variables
        # This single step replaces the huge inline script from before
        shell: bash
        run: |
          echo "SETUPTOOLS_SCM_PRETEND_VERSION=${{ needs.generate_version.outputs.version }}" >> $GITHUB_ENV
          echo "HATCH_VCS_PRETEND_VERSION=${{ needs.generate_version.outputs.version }}" >> $GITHUB_ENV

      - name: Install dependencies
        shell: bash
        run: |
          uv venv
          if [ "${{ runner.os }}" == "Windows" ]; then
            . .venv/Scripts/activate
          else
            source .venv/bin/activate
          fi
          uv pip install --upgrade hatch-vcs setuptools-scm
          echo "Hatch version: $(hatch version)"
          uv sync --verbose

      - name: Install PyInstaller
        run: uv pip install pyinstaller==6.4.0

      - name: Set UTF-8 environment (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "PYTHONUTF8=1" >> $env:GITHUB_ENV
          echo "PYTHONLEGACYWINDOWSSTDIO=utf8" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Build Executable (File & Dir) and Zip
        shell: bash
        run: |
          # Use the sanitized version for filenames
          SANITIZED_VERSION="${{ needs.generate_version.outputs.sanitized_version }}"
          
          # Activate venv
          if [ "${{ runner.os }}" == "Windows" ]; then
              source .venv/Scripts/activate
          else
              source .venv/bin/activate
          fi
          
          # Build one-file executable
          pyinstaller --onefile --name "ofscraper_${{ matrix.artifact_suffix }}_${SANITIZED_VERSION}" ofscraper/__main__.py
          
          # Build one-dir executable
          pyinstaller --name "ofscraper_${{ matrix.artifact_suffix }}_dir" ofscraper/__main__.py

          # Zip the one-dir build
          if [ "${{ runner.os }}" == "Windows" ]; then
            7z a "dist/ofscraper_${{ matrix.artifact_suffix }}_${SANITIZED_VERSION}.zip" "./dist/ofscraper_${{ matrix.artifact_suffix }}_dir/*"
          else
            zip -r "dist/ofscraper_${{ matrix.artifact_suffix }}_${SANITIZED_VERSION}.zip" "dist/ofscraper_${{ matrix.artifact_suffix }}_dir"
          fi

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.artifact_suffix }}
          path: |
            dist/*.exe
            dist/*.zip
            dist/ofscraper_${{ matrix.artifact_suffix }}_${{ needs.generate_version.outputs.sanitized_version }}
          if-no-files-found: ignore

  publish_release:
    name: Publish GitHub Release
    if: github.event_name == 'push' && !contains(github.ref, 'refs/tags/')
    needs: [build_binaries, generate_version] # Depends on both
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: List downloaded files for debugging
        run: ls -R artifacts

      - name: Create or Update Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: artifacts/*/*
          tag: "dev-${{ needs.generate_version.outputs.short_hash }}" # Use short hash for tag
          name: "Dev Build ${{ needs.generate_version.outputs.short_hash }}"
          body: "This is an auto-generated development release created from commit hash `${{ needs.generate_version.outputs.long_hash }}`. Version: `${{ needs.generate_version.outputs.version }}`"
          commit: "${{ needs.generate_version.outputs.long_hash }}"
          allowUpdates: true
          prerelease: true