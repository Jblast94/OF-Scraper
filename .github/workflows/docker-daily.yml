name: Docker Daily Build

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

permissions:
  contents: read # Required for git checkout and gh CLI to read workflow runs
  packages: write # Required for pushing Docker images to registries
  id-token: write # Required for OIDC authentication to registries like GHCR

jobs:
  generate_version:
    name: Generate Version Info
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      sanitized_version: ${{ steps.version.outputs.SANITIZED_VERSION }}
      short_hash: ${{ steps.version.outputs.SHORT_HASH }}
      long_hash: ${{ steps.version.outputs.LONG_HASH }}
      commit_timestamp: ${{ steps.version.outputs.COMMIT_TIMESTAMP }}
      base_version: ${{ steps.version.outputs.BASE_VERSION }}
      sanitized_base_version: ${{ steps.version.outputs.SANITIZED_BASE_VERSION }}
      push_type: ${{ steps.version.outputs.PUSH_TYPE }} # Output from commit_version.sh
      is_newer_than_last_successful_run: ${{ steps.version.outputs.IS_NEWER_THAN_LAST_SUCCESSFUL_RUN }} # Output from commit_version.sh
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Essential for git merge-base to compare full history
          fetch-tags: true
      
      - name: Make version script executable
        run: chmod +x ./scripts/commit_version.sh
      - name: Generate Version and Git Info
        id: version # This step runs your commit_version.sh script
        # Pass GitHub Actions context variables as environment variables to the script
        # This is crucial for the gh CLI calls and Git comparisons inside the script to work.
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_WORKFLOW_REF: ${{ github.workflow_ref }} # Provides workflow file path (e.g., "owner/repo/.github/workflows/workflow-name.yml@ref")
          GITHUB_REF: ${{ github.ref }} # Provides branch ref (e.g., "refs/heads/main")
          GITHUB_EVENT_BEFORE: ${{ github.event.before }} # Provides previous commit SHA for push events
        run: ./scripts/commit_version.sh # Execute your script

  build_and_publish:
    name: Build and Publish to ${{ matrix.registry.name }}
    needs: [generate_version] # This job depends on the outputs from generate_version
    runs-on: ubuntu-latest # This runner is typically linux/amd64 and is capable of multi-platform builds

    strategy:
      matrix:
        registry:
          - id: ghcr
            name: GitHub Packages
            sign: false
          - id: dockerhub
            name: Docker Hub
            sign: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU # Essential for cross-platform builds (e.g., building ARM on AMD64 runner)
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx # Essential for multi-platform builds
        uses: docker/setup-buildx-action@v3
        # You can specify a builder if needed for advanced scenarios, e.g.:
        # with:
        #   driver-opts: image=moby/buildkit:latest

      - name: Log in to ${{ matrix.registry.name }}
        uses: docker/login-action@v3
        with:
          registry: ${{ matrix.registry.id == 'ghcr' && 'ghcr.io' || 'docker.io' }}
          username: ${{ matrix.registry.id == 'ghcr' && github.actor || secrets.DOCKERHUB_USERNAME }}
          password: ${{ matrix.registry.id == 'ghcr' && secrets.GITHUB_TOKEN || secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          # Define the target Docker image name in the registry
          images: ${{ matrix.registry.id == 'ghcr' && format('ghcr.io/{0}', github.repository) || 'datawhores/of-scraper' }}
          tags: |
            # 1. Primary Tag: Branch name (e.g., "3.13-aio" if that's your branch name)
            # The action automatically sanitizes branch names (e.g., replaces '/' with '-')
            type=ref,event=branch

            # 2. Detailed Dev Tag: Mirrors your GitHub Release tag format for consistency
            # Example: dev-3-13-dev8-e466a562-1718305800 (uses sanitized_base_version for valid chars)
            type=raw,value=dev-${{ needs.generate_version.outputs.sanitized_base_version }}-${{ needs.generate_version.outputs.short_hash }}-${{ needs.generate_version.outputs.commit_timestamp }}

            # 3. Shorter Dev Tag: (e.g., 3-13-dev8-e466a562) - a more concise version tag
            type=raw,value=${{ needs.generate_version.outputs.sanitized_base_version }}-${{ needs.generate_version.outputs.short_hash }}
            
            # 4. Conditional 'latest' Tag: ONLY updated if the current commit is truly newer than the last successful build's commit
            type=raw,value=latest,enable=${{ needs.generate_version.outputs.is_newer_than_last_successful_run }}

            # 5. Optional Tag: 'main' tag specifically for the main branch, if distinct from latest
            type=raw,value=main,enable=${{ github.ref == 'refs/heads/main' }}
            

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64 # Build for multiple architectures
          build-args: |
            BUILD_VERSION=${{ needs.generate_version.outputs.version }}
            INSTALL_FFMPEG=true # Pass build arg to Dockerfile if needed

      # Cosign signing steps (remain unchanged)
      - name: Install Cosign
        if: matrix.registry.sign == true
        uses: sigstore/cosign-installer@v3.5.0

      - name: Write signing key to disk
        if: matrix.registry.sign == true
        run: echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key
        shell: bash

      - name: Sign the published Docker image
        if: matrix.registry.sign == true
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          COSIGN_EXPERIMENTAL: "true"
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign --yes --key cosign.key {}@${{ steps.build-and-push.outputs.digest }}