build_and_publish:
    name: Build and Publish to ${{ matrix.registry.name }}
    needs: [generate_version]
    runs-on: ubuntu-latest # This runner is typically linux/amd64

    strategy:
      matrix:
        registry:
          - id: ghcr
            name: GitHub Packages
            sign: false
          - id: dockerhub
            name: Docker Hub
            sign: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU # Essential for cross-platform builds (e.g., building ARM on AMD64 runner)
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx # Essential for multi-platform builds
        uses: docker/setup-buildx-action@v3
        # You might want to specify a builder to ensure consistent behavior across runs, e.g.:
        # with:
        #   driver-opts: image=moby/buildkit:latest

      - name: Log in to ${{ matrix.registry.name }}
        uses: docker/login-action@v3
        with:
          registry: ${{ matrix.registry.id == 'ghcr' && 'ghcr.io' || 'docker.io' }}
          username: ${{ matrix.registry.id == 'ghcr' && github.actor || secrets.DOCKERHUB_USERNAME }}
          password: ${{ matrix.registry.id == 'ghcr' && secrets.GITHUB_TOKEN || secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.registry.id == 'ghcr' && format('ghcr.io/{0}', github.repository) || 'datawhores/of-scraper' }}
          tags: |
            type=ref,event=branch
            # Example tag for build version with short hash and timestamp
            type=raw,value=${{ needs.generate_version.outputs.base_version }}-${{ needs.generate_version.outputs.short_hash }}-${{ needs.generate_version.outputs.commit_timestamp }}    
            # Example tag for build version with short hash
            type=raw,value=${{ needs.generate_version.outputs.base_version }}-${{ needs.generate_version.outputs.short_hash }}    
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || contains(github.ref, 'dev') }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # --- IMPORTANT: ADD THIS LINE FOR MULTI-PLATFORM BUILDS ---
          platforms: linux/amd64,linux/arm64 # Specify the target platforms
          build-args: |
            BUILD_VERSION=${{ needs.generate_version.outputs.version }}
            INSTALL_FFMPEG=true # This ensures pyffmpeg (and its bundled ffmpeg) is installed

      - name: Install Cosign
        if: matrix.registry.sign == true
        uses: sigstore/cosign-installer@v3.5.0

      - name: Write signing key to disk
        if: matrix.registry.sign == true
        run: echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key
        shell: bash

      - name: Sign the published Docker image
        if: matrix.registry.sign == true
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          COSIGN_EXPERIMENTAL: "true"
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign --yes --key cosign.key {}@${{ steps.build-and-push.outputs.digest }}