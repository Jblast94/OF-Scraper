name: Docker Daily Build

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  generate_version:
    name: Generate Version Info
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      sanitized_version: ${{ steps.version.outputs.SANITIZED_VERSION }}
      short_hash: ${{ steps.version.outputs.SHORT_HASH }}
      long_hash: ${{ steps.version.outputs.LONG_HASH }}
      commit_timestamp: ${{ steps.version.outputs.COMMIT_TIMESTAMP }}
      base_version: ${{ steps.version.outputs.BASE_VERSION }}
      sanitized_base_version: ${{ steps.version.outputs.SANITIZED_BASE_VERSION }}
      push_type: ${{ steps.version.outputs.PUSH_TYPE }}
      is_newer_than_last_successful_run: ${{ steps.version.outputs.IS_NEWER_THAN_LAST_SUCCESSFUL_RUN }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      
      - name: Make script executable
        run: chmod +x ./scripts/commit_version.sh
      - name: Generate Version and Git Info
        id: version
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          # --- ADD THIS LINE ---
          WORKFLOW_FILE_NAME_FOR_API: 'docker-daily-build.yml' # <--- USE YOUR ACTUAL WORKFLOW FILENAME HERE
          # --- END ADDITION ---
          GITHUB_WORKFLOW_REF: ${{ github.workflow_ref }} # Still pass for general info, but not for WORKFLOW_ID now
          GITHUB_REF: ${{ github.ref }}
          GITHUB_EVENT_BEFORE: ${{ github.event.before }}
        run: ./scripts/commit_version.sh

  build_binaries:
    name: Build on ${{ matrix.os }}
    needs: [generate_version]
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_suffix: linux
            shell: bash
          - os: windows-latest
            artifact_suffix: windows
            shell: pwsh
          - os: macos-latest
            artifact_suffix: macos
            shell: bash

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12.0
      - name: Install uv
        uses: astral-sh/setup-uv@v1

      - name: Set Version Environment Variables
        shell: bash
        run: |
          echo "SETUPTOOLS_SCM_PRETEND_VERSION=${{ needs.generate_version.outputs.version }}" >> $GITHUB_ENV
          echo "HATCH_VCS_PRETEND_VERSION=${{ needs.generate_version.outputs.version }}" >> $GITHUB_ENV

      - name: Install Dependencies and Build Tools
        shell: bash
        run: |
          uv venv
          if [ "${{ runner.os }}" == "Windows" ]; then
            . .venv/Scripts/activate
          else
            source .venv/bin/activate
          fi
          uv sync --verbose --extra ffmpeg --extra dev

      - name: Set UTF-8 environment (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "PYTHONUTF8=1" >> $env:GITHUB_ENV
          echo "PYTHONLEGACYWINDOWSSTDIO=utf8" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Build Executable using Spec Files (One-File)
        id: build_onefile
        shell: bash
        continue-on-error: true
        run: |
          SANITIZED_VERSION="${{ needs.generate_version.outputs.sanitized_version }}"
          EXE_NAME="ofscraper_${{ matrix.artifact_suffix }}_${SANITIZED_VERSION}"
          
          if [ "${{ runner.os }}" == "Windows" ]; then
              source .venv/Scripts/activate
              EXE_EXT=".exe"
          else
              source .venv/bin/activate
              EXE_EXT=""
          fi
          
          echo "Building one-file executable from specs/onefile.spec..."
          pyinstaller specs/onefile.spec
          mv dist/ofscraper_file${EXE_EXT} dist/${EXE_NAME}${EXE_EXT}
          echo "one_file_path=dist/${EXE_NAME}${EXE_EXT}" >> $GITHUB_OUTPUT
          echo "one_file_name=${EXE_NAME}${EXE_EXT}" >> $GITHUB_OUTPUT

      - name: Upload One-File Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build_onefile.outputs.one_file_name }}
          path: ${{ steps.build_onefile.outputs.one_file_path }}
          if-no-files-found: ignore

      - name: Build and Zip One-Dir Bundle
        id: build_onedir_zip
        shell: bash
        continue-on-error: true
        run: |
          SANITIZED_VERSION="${{ needs.generate_version.outputs.sanitized_version }}"
          DIR_NAME="ofscraper_${{ matrix.artifact_suffix }}_dir"
          ZIP_NAME="ofscraper_${{ matrix.artifact_suffix }}_${SANITIZED_VERSION}.zip"

          if [ "${{ runner.os }}" == "Windows" ]; then
              source .venv/Scripts/activate
          else
              source .venv/bin/activate
          fi

          echo "Building one-dir bundle from specs/onedir.spec..."
          pyinstaller specs/onedir.spec
          mv dist/ofscraper_dir dist/${DIR_NAME}

          echo "Zipping one-dir build..."
          if [ "${{ runner.os }}" == "Windows" ]; then
            powershell -Command "Compress-Archive -Path dist/${DIR_NAME} -DestinationPath dist/${ZIP_NAME} -Force"
          else
            zip -r "dist/${ZIP_NAME}" "dist/${DIR_NAME}"
          fi
          echo "zip_path=dist/${ZIP_NAME}" >> $GITHUB_OUTPUT
          echo "zip_name=${ZIP_NAME}" >> $GITHUB_OUTPUT
          echo "dir_path=dist/${DIR_NAME}" >> $GITHUB_OUTPUT
          echo "dir_name=dist/${DIR_NAME}" >> $GITHUB_OUTPUT

      - name: Upload Zipped One-Dir Artifact
        if: success() && steps.build_onedir_zip.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build_onedir_zip.outputs.zip_name }}
          path: ${{ steps.build_onedir_zip.outputs.zip_path }}
          if-no-files-found: ignore

      - name: Upload One-Dir Folder (if zip failed)
        if: failure() && steps.build_onedir_zip.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build_onedir_zip.outputs.dir_name }}
          path: ${{ steps.build_onedir_zip.outputs.dir_path }}
          if-no-files-found: ignore

  publish_release:
    name: Publish GitHub Release
    if: github.event_name == 'push' && !contains(github.ref, 'refs/tags/')
    needs: [build_binaries, generate_version]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: List downloaded files for debugging
        run: ls -R artifacts

      - name: Create or Update Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: artifacts/*/*
          tag: "dev-${{ needs.generate_version.outputs.sanitized_base_version }}-${{ needs.generate_version.outputs.short_hash }}-${{ needs.generate_version.outputs.commit_timestamp }}"
          name: "Dev Build ${{ needs.generate_version.outputs.base_version }} (Commit ${{ needs.generate_version.outputs.short_hash }}) - ${{ needs.generate_version.outputs.commit_timestamp }}"
          
          body: "This is an auto-generated development release created from commit hash `${{ needs.generate_version.outputs.long_hash }}`. Version: `${{ needs.generate_version.outputs.version }}`"
          commit: "${{ needs.generate_version.outputs.long_hash }}"
          allowUpdates: true
          prerelease: true

  build_and_publish_docker:
    name: Build and Publish Docker to ${{ matrix.registry.name }}
    needs: [generate_version]
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        registry:
          - id: ghcr
            name: GitHub Packages
            sign: false
          - id: dockerhub
            name: Docker Hub
            sign: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to ${{ matrix.registry.name }}
        uses: docker/login-action@v3
        with:
          registry: ${{ matrix.registry.id == 'ghcr' && 'ghcr.io' || 'docker.io' }}
          username: ${{ matrix.registry.id == 'ghcr' && github.actor || secrets.DOCKERHUB_USERNAME }}
          password: ${{ matrix.registry.id == 'ghcr' && secrets.GITHUB_TOKEN || secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.registry.id == 'ghcr' && format('ghcr.io/{0}', github.repository) || 'datawhores/of-scraper' }}
          tags: |
            type=ref,event=branch
            type=raw,value=dev-${{ needs.generate_version.outputs.sanitized_base_version }}-${{ needs.generate_version.outputs.short_hash }}-${{ needs.generate_version.outputs.commit_timestamp }}
            type=raw,value=${{ needs.generate_version.outputs.sanitized_base_version }}-${{ needs.generate_version.outputs.short_hash }}
            type=raw,value=latest,enable=${{ needs.generate_version.outputs.is_newer_than_last_successful_run }}
            type=raw,value=main,enable=${{ github.ref == 'refs/heads/main' }}
            

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILD_VERSION=${{ needs.generate_version.outputs.version }}
            INSTALL_FFMPEG=true

      - name: Install Cosign
        if: matrix.registry.sign == true
        uses: sigstore/cosign-installer@v3.5.0

      - name: Write signing key to disk
        if: matrix.registry.sign == true
        run: echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key
        shell: bash

      - name: Sign the published Docker image
        if: matrix.registry.sign == true
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          COSIGN_EXPERIMENTAL: "true"
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign --yes --key cosign.key {}@${{ steps.build-and-push.outputs.digest }}