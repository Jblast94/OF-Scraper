name: Docker Daily Build

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  generate_version:
    # This job is back. It runs once, calculates all version info using our script,
    # and provides it as an output for the build job.
    name: Generate Version Info
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      sanitized_version: ${{ steps.version.outputs.SANITIZED_VERSION }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Make version script executable
        run: chmod +x ./scripts/commit_version.sh
      - name: Generate Version from Git
        id: version
        run: ./scripts/commit_version.sh

  build_and_publish:
    name: Build and Publish to ${{ matrix.registry.name }}
    needs: [generate_version] # This job now depends on the version from the step above
    runs-on: ubuntu-latest

    strategy:
      matrix:
        registry:
          - id: ghcr
            name: GitHub Packages
            sign: false
          - id: dockerhub
            name: Docker Hub
            sign: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to ${{ matrix.registry.name }}
        uses: docker/login-action@v3
        with:
          registry: ${{ matrix.registry.id == 'ghcr' && 'ghcr.io' || 'docker.io' }}
          username: ${{ matrix.registry.id == 'ghcr' && github.actor || secrets.DOCKERHUB_USERNAME }}
          password: ${{ matrix.registry.id == 'ghcr' && secrets.GITHUB_TOKEN || secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.registry.id == 'ghcr' && format('ghcr.io/{0}', github.repository) || 'datawhores/of-scraper' }}
          tags: |
            # Use the sanitized version from our script for the tag
            type=raw,value=${{ needs.generate_version.outputs.sanitized_version }}
            type=ref,event=branch
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=dev

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # --- This block now passes the auto-generated version AND enables FFMPEG ---
          build-args: |
            BUILD_VERSION=${{ needs.generate_version.outputs.version }}
            INSTALL_FFMPEG=true

      # ... (signing steps remain the same) ...
      - name: Install Cosign
        if: matrix.registry.sign == true
        uses: sigstore/cosign-installer@v3.5.0

      - name: Write signing key to disk
        if: matrix.registry.sign == true
        run: echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key
        shell: bash

      - name: Sign the published Docker image
        if: matrix.registry.sign == true
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          COSIGN_EXPERIMENTAL: "true"
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign --yes --key cosign.key {}@${{ steps.build-and-push.outputs.digest }}